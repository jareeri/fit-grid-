{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Orange\\\\Desktop\\\\project Nodejs\\\\client\\\\src\\\\admin1\\\\Change.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ProductForm from './ProductForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Change = () => {\n  _s();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  // State to manage products and edit mode\n  const [products, setProducts] = useState([]);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [editProductId, setEditProductId] = useState(null);\n\n  // Function to handle form submission\n  const handleFormSubmit = formData => {\n    if (isEditMode) {\n      // Logic to update existing product\n      const updatedProducts = products.map(product => product.id === editProductId ? {\n        ...product,\n        ...formData\n      } : product);\n      setProducts(updatedProducts);\n      setIsEditMode(false);\n      setEditProductId(null);\n    } else {\n      // Logic to add new product\n      const newProduct = {\n        id: Date.now(),\n        // Assign a unique ID (you can use a more robust method)\n        ...formData\n      };\n      setProducts([...products, newProduct]);\n    }\n  };\n\n  // Function to handle product edit\n  const handleEdit = productId => {\n    const productToEdit = products.find(product => product.id === productId);\n    if (productToEdit) {\n      setIsEditMode(true);\n      setEditProductId(productId);\n    }\n  };\n  const handleCloseForm = () => {\n    setIsFormOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsFormOpen(true),\n      children: \"Open Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProductForm, {\n      isOpen: isFormOpen,\n      initialProduct: products,\n      onSubmit: handleFormSubmit,\n      onClose: handleCloseForm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: products.map(product => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [product.productName, \" - \", product.price, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEdit(product.id),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, product.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Change, \"imoF0TyvSkSaeFw6BimCFA1W4Gw=\");\n_c = Change;\nexport default Change;\nvar _c;\n$RefreshReg$(_c, \"Change\");","map":{"version":3,"names":["React","useState","ProductForm","jsxDEV","_jsxDEV","Change","_s","isFormOpen","setIsFormOpen","products","setProducts","isEditMode","setIsEditMode","editProductId","setEditProductId","handleFormSubmit","formData","updatedProducts","map","product","id","newProduct","Date","now","handleEdit","productId","productToEdit","find","handleCloseForm","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","initialProduct","onSubmit","onClose","productName","price","_c","$RefreshReg$"],"sources":["C:/Users/Orange/Desktop/project Nodejs/client/src/admin1/Change.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport ProductForm from './ProductForm';\r\n\r\nconst Change = () => {\r\n  const [isFormOpen, setIsFormOpen] = useState(false);\r\n  // State to manage products and edit mode\r\n  const [products, setProducts] = useState([]);\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n  const [editProductId, setEditProductId] = useState(null);\r\n\r\n  // Function to handle form submission\r\n  const handleFormSubmit = (formData) => {\r\n    if (isEditMode) {\r\n      // Logic to update existing product\r\n      const updatedProducts = products.map((product) =>\r\n        product.id === editProductId ? { ...product, ...formData } : product\r\n      );\r\n      setProducts(updatedProducts);\r\n      setIsEditMode(false);\r\n      setEditProductId(null);\r\n    } else {\r\n      // Logic to add new product\r\n      const newProduct = {\r\n        id: Date.now(), // Assign a unique ID (you can use a more robust method)\r\n        ...formData,\r\n      };\r\n      setProducts([...products, newProduct]);\r\n    }\r\n  };\r\n\r\n  // Function to handle product edit\r\n  const handleEdit = (productId) => {\r\n    const productToEdit = products.find((product) => product.id === productId);\r\n    if (productToEdit) {\r\n      setIsEditMode(true);\r\n      setEditProductId(productId);\r\n    }\r\n  };\r\n  const handleCloseForm = () => {\r\n    setIsFormOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Render ProductForm component and pass onSubmit and initialProduct props */}\r\n      <button onClick={() => setIsFormOpen(true)}>Open Form</button>\r\n      <ProductForm\r\n        isOpen={isFormOpen}\r\n        initialProduct={products}\r\n        onSubmit={handleFormSubmit}\r\n        onClose={handleCloseForm}\r\n      />\r\n\r\n      {/* Render list of products */}\r\n      <ul>\r\n        {products.map((product) => (\r\n          <li key={product.id}>\r\n            {product.productName} - {product.price} {/* Display other product details */}\r\n            <button onClick={() => handleEdit(product.id)}>Edit</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Change;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}