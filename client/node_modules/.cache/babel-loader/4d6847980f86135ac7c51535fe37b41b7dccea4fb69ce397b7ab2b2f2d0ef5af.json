{"ast":null,"code":"// import React, { useState } from \"react\";\n// import { ElementsConsumer, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import CardSection from \"./CardSection\";\n// import axios from \"axios\";\n// import { useLocation, useNavigate } from 'react-router-dom';\n\n// function CheckoutForm({ stripe, elements }) {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const { name, price, planId } = location.search\n//     ? Object.fromEntries(new URLSearchParams(location.search))\n//     : {};\n\n//   const [errorMessage, setErrorMessage] = useState(\"\");\n//   const [successMessage, setSuccessMessage] = useState(\"\");\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     if (!stripe || !elements) {\n//       return;\n//     }\n\n//     // Validate the form fields\n//     if (!validateForm()) {\n//       return;\n//     }\n\n//     const { error, paymentMethod } = await stripe.createPaymentMethod({\n//       type: \"card\",\n//       card: elements.getElement(CardElement),\n//     });\n\n//     if (error) {\n//       setErrorMessage(error.message);\n//       setSuccessMessage(\"\"); // Clear success message if there was an error\n//     } else {\n//       // Continue with the rest of your code\n//       setErrorMessage(\"\"); // Clear any previous error message\n\n//       // Handle amount\n//       if (paymentMethod) {\n//         const { id } = paymentMethod;\n\n//         // Pass the price to the backend\n//         const response = await axios.post(\"http://localhost:8080/payment\", {\n//           amount: price * 100, // Assuming price is in dollars, convert to cents\n//           id,\n//         });\n\n//         if (response.data.success) {\n//           setSuccessMessage(\"Payment successful!\"); // Set success message\n\n//           // Redirect to the home page after successful payment\n//           navigate('/'); // You can replace '/' with the actual home page path\n//         } else {\n//           console.log(\"Payment failed\");\n//           // Handle failure appropriately\n//         }\n//       } else {\n//         console.log(\"Payment method is undefined\");\n//         // Handle undefined paymentMethod\n//       }\n//     }\n//   };\n\n//   // Basic form validation function\n//   const validateForm = () => {\n//     // You can add more sophisticated validation as needed\n//     const cardElement = elements.getElement(CardElement);\n\n//     if (!cardElement) {\n//       setErrorMessage(\"Please enter card information\");\n//       return false;\n//     }\n\n//     setErrorMessage(\"\");\n//     return true;\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"product-info\">\n//         <h3 className=\"product-title\">{name}</h3>\n//         <h4 className=\"product-price\">{`$${price}`}</h4>\n//       </div>\n//       <form onSubmit={handleSubmit}>\n//         <CardSection />\n//         <button className=\"btn-pay\">Buy Now</button>\n//       </form>\n//       {errorMessage && <div className=\"text-red-500 mt-2\">{errorMessage}</div>}\n//       {successMessage && <div className=\"text-green-500 mt-2\">{successMessage}</div>}\n//     </div>\n//   );\n// }\n\n// export default CheckoutForm;\n\n// import React, { useState, useEffect } from \"react\";\n// import { ElementsConsumer, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n// import CardSection from \"./CardSection\";\n// import axios from \"axios\";\n// import { useLocation, useNavigate } from 'react-router-dom';\n\n// function CheckoutForm({ stripe, elements }) {\n//   const location = useLocation();\n//   const navigate = useNavigate();\n//   const { planId } = location.search\n//     ? Object.fromEntries(new URLSearchParams(location.search))\n//     : {};\n\n//   const [name, setName] = useState(\"\");\n//   const [price, setPrice] = useState(\"\");\n//   const [errorMessage, setErrorMessage] = useState(\"\");\n//   const [successMessage, setSuccessMessage] = useState(\"\");\n\n//   useEffect(() => {\n//     const fetchPlanDetails = async () => {\n//       try {\n//         const response = await axios.get(`http://localhost:8080/getplanbyid/${planId}`);\n//         const { name, price } = response.data;\n\n//         setName(name);\n//         setPrice(price);\n//       } catch (error) {\n//         console.error(\"Error fetching plan details:\", error);\n//         // Handle the error appropriately\n//       }\n//     };\n\n//     if (planId) {\n//       fetchPlanDetails();\n//     }\n//   }, [planId]);\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     if (!stripe || !elements) {\n//       return;\n//     }\n\n//     // Validate the form fields\n//     if (!validateForm()) {\n//       return;\n//     }\n\n//     const { error, paymentMethod } = await stripe.createPaymentMethod({\n//       type: \"card\",\n//       card: elements.getElement(CardElement),\n//     });\n\n//     if (error) {\n//       setErrorMessage(error.message);\n//       setSuccessMessage(\"\"); // Clear success message if there was an error\n//     } else {\n//       // Continue with the rest of your code\n//       setErrorMessage(\"\"); // Clear any previous error message\n\n//       // Handle amount\n//       if (paymentMethod) {\n//         const { id } = paymentMethod;\n\n//         // Pass the price to the backend\n//         const response = await axios.post(\"http://localhost:8080/payment\", {\n//           amount: price * 100, // Assuming price is in dollars, convert to cents\n//           id,\n//         });\n\n//         if (response.data.success) {\n//           setSuccessMessage(\"Payment successful!\"); // Set success message\n\n//           // Redirect to the home page after successful payment\n//           navigate('/'); // You can replace '/' with the actual home page path\n//         } else {\n//           console.log(\"Payment failed\");\n//           // Handle failure appropriately\n//         }\n//       } else {\n//         console.log(\"Payment method is undefined\");\n//         // Handle undefined paymentMethod\n//       }\n//     }\n//   };\n\n//   // Basic form validation function\n//   const validateForm = () => {\n//     // You can add more sophisticated validation as needed\n//     const cardElement = elements.getElement(CardElement);\n\n//     if (!cardElement) {\n//       setErrorMessage(\"Please enter card information\");\n//       return false;\n//     }\n\n//     setErrorMessage(\"\");\n//     return true;\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"product-info\">\n//         <h3 className=\"product-title\">{name}</h3>\n//         <h4 className=\"product-price\">{`$${price}`}</h4>\n//       </div>\n//       <form onSubmit={handleSubmit}>\n//         <CardSection />\n//         <button className=\"btn-pay\">Buy Now</button>\n//       </form>\n//       {errorMessage && <div className=\"text-red-500 mt-2\">{errorMessage}</div>}\n//       {successMessage && <div className=\"text-green-500 mt-2\">{successMessage}</div>}\n//     </div>\n//   );\n// }\n\n// export default CheckoutForm;","map":{"version":3,"names":[],"sources":["C:/Users/Orange/Desktop/abc/Masterpiece/client/src/Components/CheckoutForm.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { ElementsConsumer, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\n// import CardSection from \"./CardSection\";\r\n// import axios from \"axios\";\r\n// import { useLocation, useNavigate } from 'react-router-dom';\r\n\r\n// function CheckoutForm({ stripe, elements }) {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const { name, price, planId } = location.search\r\n//     ? Object.fromEntries(new URLSearchParams(location.search))\r\n//     : {};\r\n\r\n//   const [errorMessage, setErrorMessage] = useState(\"\");\r\n//   const [successMessage, setSuccessMessage] = useState(\"\");\r\n\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n\r\n//     if (!stripe || !elements) {\r\n//       return;\r\n//     }\r\n\r\n//     // Validate the form fields\r\n//     if (!validateForm()) {\r\n//       return;\r\n//     }\r\n\r\n//     const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n//       type: \"card\",\r\n//       card: elements.getElement(CardElement),\r\n//     });\r\n\r\n//     if (error) {\r\n//       setErrorMessage(error.message);\r\n//       setSuccessMessage(\"\"); // Clear success message if there was an error\r\n//     } else {\r\n//       // Continue with the rest of your code\r\n//       setErrorMessage(\"\"); // Clear any previous error message\r\n\r\n//       // Handle amount\r\n//       if (paymentMethod) {\r\n//         const { id } = paymentMethod;\r\n\r\n//         // Pass the price to the backend\r\n//         const response = await axios.post(\"http://localhost:8080/payment\", {\r\n//           amount: price * 100, // Assuming price is in dollars, convert to cents\r\n//           id,\r\n//         });\r\n\r\n//         if (response.data.success) {\r\n//           setSuccessMessage(\"Payment successful!\"); // Set success message\r\n\r\n//           // Redirect to the home page after successful payment\r\n//           navigate('/'); // You can replace '/' with the actual home page path\r\n//         } else {\r\n//           console.log(\"Payment failed\");\r\n//           // Handle failure appropriately\r\n//         }\r\n//       } else {\r\n//         console.log(\"Payment method is undefined\");\r\n//         // Handle undefined paymentMethod\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   // Basic form validation function\r\n//   const validateForm = () => {\r\n//     // You can add more sophisticated validation as needed\r\n//     const cardElement = elements.getElement(CardElement);\r\n\r\n//     if (!cardElement) {\r\n//       setErrorMessage(\"Please enter card information\");\r\n//       return false;\r\n//     }\r\n\r\n//     setErrorMessage(\"\");\r\n//     return true;\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"product-info\">\r\n//         <h3 className=\"product-title\">{name}</h3>\r\n//         <h4 className=\"product-price\">{`$${price}`}</h4>\r\n//       </div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <CardSection />\r\n//         <button className=\"btn-pay\">Buy Now</button>\r\n//       </form>\r\n//       {errorMessage && <div className=\"text-red-500 mt-2\">{errorMessage}</div>}\r\n//       {successMessage && <div className=\"text-green-500 mt-2\">{successMessage}</div>}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CheckoutForm;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { ElementsConsumer, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\n// import CardSection from \"./CardSection\";\r\n// import axios from \"axios\";\r\n// import { useLocation, useNavigate } from 'react-router-dom';\r\n\r\n// function CheckoutForm({ stripe, elements }) {\r\n//   const location = useLocation();\r\n//   const navigate = useNavigate();\r\n//   const { planId } = location.search\r\n//     ? Object.fromEntries(new URLSearchParams(location.search))\r\n//     : {};\r\n\r\n//   const [name, setName] = useState(\"\");\r\n//   const [price, setPrice] = useState(\"\");\r\n//   const [errorMessage, setErrorMessage] = useState(\"\");\r\n//   const [successMessage, setSuccessMessage] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     const fetchPlanDetails = async () => {\r\n//       try {\r\n//         const response = await axios.get(`http://localhost:8080/getplanbyid/${planId}`);\r\n//         const { name, price } = response.data;\r\n\r\n//         setName(name);\r\n//         setPrice(price);\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching plan details:\", error);\r\n//         // Handle the error appropriately\r\n//       }\r\n//     };\r\n\r\n//     if (planId) {\r\n//       fetchPlanDetails();\r\n//     }\r\n//   }, [planId]);\r\n\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n\r\n//     if (!stripe || !elements) {\r\n//       return;\r\n//     }\r\n\r\n//     // Validate the form fields\r\n//     if (!validateForm()) {\r\n//       return;\r\n//     }\r\n\r\n//     const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n//       type: \"card\",\r\n//       card: elements.getElement(CardElement),\r\n//     });\r\n\r\n//     if (error) {\r\n//       setErrorMessage(error.message);\r\n//       setSuccessMessage(\"\"); // Clear success message if there was an error\r\n//     } else {\r\n//       // Continue with the rest of your code\r\n//       setErrorMessage(\"\"); // Clear any previous error message\r\n\r\n//       // Handle amount\r\n//       if (paymentMethod) {\r\n//         const { id } = paymentMethod;\r\n\r\n//         // Pass the price to the backend\r\n//         const response = await axios.post(\"http://localhost:8080/payment\", {\r\n//           amount: price * 100, // Assuming price is in dollars, convert to cents\r\n//           id,\r\n//         });\r\n\r\n//         if (response.data.success) {\r\n//           setSuccessMessage(\"Payment successful!\"); // Set success message\r\n\r\n//           // Redirect to the home page after successful payment\r\n//           navigate('/'); // You can replace '/' with the actual home page path\r\n//         } else {\r\n//           console.log(\"Payment failed\");\r\n//           // Handle failure appropriately\r\n//         }\r\n//       } else {\r\n//         console.log(\"Payment method is undefined\");\r\n//         // Handle undefined paymentMethod\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   // Basic form validation function\r\n//   const validateForm = () => {\r\n//     // You can add more sophisticated validation as needed\r\n//     const cardElement = elements.getElement(CardElement);\r\n\r\n//     if (!cardElement) {\r\n//       setErrorMessage(\"Please enter card information\");\r\n//       return false;\r\n//     }\r\n\r\n//     setErrorMessage(\"\");\r\n//     return true;\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"product-info\">\r\n//         <h3 className=\"product-title\">{name}</h3>\r\n//         <h4 className=\"product-price\">{`$${price}`}</h4>\r\n//       </div>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <CardSection />\r\n//         <button className=\"btn-pay\">Buy Now</button>\r\n//       </form>\r\n//       {errorMessage && <div className=\"text-red-500 mt-2\">{errorMessage}</div>}\r\n//       {successMessage && <div className=\"text-green-500 mt-2\">{successMessage}</div>}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CheckoutForm;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}